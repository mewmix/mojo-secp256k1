"""Known Answer Test for ECDSA signing."""

from keccak.keccak import to_hex32
from secp256k1.sign import ecdsa_sign_keccak, bytes_to_int_be
from secp256k1.sc import CURVE_N

fn test_ecdsa_kat() raises:
    print("Testing ECDSA signing with KAT vector...")

    # KAT vector generated by python_tests/kat_and_benchmark.py using eth-keys
    var p_key_hex = "c9afa9d845ba75166b5c215767b1d6934e50c3db36e89b127b8a622b120f6721"
    var m_hash_hex = "c532791fc298f17681ae108421539e4cd072ef0aa410600e8ddebb94af59512d"
    var expected_r_hex = "cff2f298c3878e11465d3bf013b23e46a6fc9493542ce1fef4038e0dadd04f89"
    var expected_s_hex = "4f9fbc3433bb9bd242d556face66bd7951ef8c329d1349ef105d4091acc498f6"

    var seckey32 = from_hex(p_key_hex)
    var msg32 = from_hex(m_hash_hex)
    var expected_r = from_hex(expected_r_hex)
    var expected_s = from_hex(expected_s_hex)

    try:
        var sig = ecdsa_sign_keccak(msg32, seckey32)

        print("r: " + to_hex32(sig.r))
        print("s: " + to_hex32(sig.s))

        assert_lists_equal(sig.r, expected_r, "r value mismatch")
        assert_lists_equal(sig.s, expected_s, "s value mismatch")

        print("✓ ECDSA KAT passed")
    except e:
        print("✗ ECDSA KAT failed: " + String(e))
        raise e

fn from_hex(hex_str: String) -> List[Int]:
    var bytes = List[Int]()
    for i in range(0, len(hex_str), 2):
        var h = hex_str[i:i+2]
        var val = 0
        for c in h:
            val = val * 16
            if '0' <= c <= '9':
                val += ord(c) - ord('0')
            elif 'a' <= c <= 'f':
                val += ord(c) - ord('a') + 10
            elif 'A' <= c <= 'F':
                val += ord(c) - ord('A') + 10
        bytes.append(val)
    return bytes.copy()

fn assert_lists_equal(list1: List[Int], list2: List[Int], message: String) raises:
    if len(list1) != len(list2):
        raise Error("Assertion failed: " + message + " (different lengths)")
    for i in range(len(list1)):
        if list1[i] != list2[i]:
            raise Error("Assertion failed: " + message + " (mismatch at index " + String(i) + ")")

fn assert_true(condition: Bool, message: String) raises:
    if not condition:
        raise Error("Assertion failed: " + message)

fn main() raises:
    test_ecdsa_kat()
